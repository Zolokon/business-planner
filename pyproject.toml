[project]
name = "business-planner"
version = "1.0.0"
description = "Voice-first task management for 4 businesses via Telegram bot"
authors = [{name = "Константин", email = "konstantin@example.com"}]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "Proprietary"}

[project.urls]
Documentation = "https://github.com/yourusername/planer_4/tree/main/docs"
Repository = "https://github.com/yourusername/planer_4"

[build-system]
requires = ["setuptools>=68.0"]
build-backend = "setuptools.build_meta"

# ============================================================================
# Black (Code Formatting)
# ============================================================================
[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# ============================================================================
# isort (Import Sorting)
# ============================================================================
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# ============================================================================
# mypy (Type Checking)
# ============================================================================
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Ignore missing imports for third-party packages
[[tool.mypy.overrides]]
module = [
    "langgraph.*",
    "langchain.*",
    "telegram.*",
    "pgvector.*"
]
ignore_missing_imports = true

# ============================================================================
# Ruff (Fast Linter)
# ============================================================================
[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports OK in __init__.py

# ============================================================================
# Pytest (Testing)
# ============================================================================
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

# Markers
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (database, Redis)",
    "e2e: End-to-end tests (full workflows)",
    "slow: Slow tests (> 1 second)",
    "ai: Tests that use AI APIs",
]

# Coverage
addopts = [
    "--strict-markers",
    "--strict-config",
    "-ra",  # Show summary of all test outcomes
]

# ============================================================================
# Coverage
# ============================================================================
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/migrations/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# Target coverage
fail_under = 80

