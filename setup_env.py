#!/usr/bin/env python3
"""
Quick setup script for Business Planner environment variables.

Usage:
    python setup_env.py
"""

import os
import sys
from pathlib import Path


def create_env_file():
    """Create .env file with template."""
    
    env_template = """# ============================================================================
# Business Planner - Environment Variables
# ============================================================================
# Generated by setup_env.py
# Fill in your API keys and tokens below
# ============================================================================

# ============================================================================
# Application Settings
# ============================================================================
ENVIRONMENT=development
DEBUG=true
LOG_LEVEL=INFO

API_HOST=0.0.0.0
API_PORT=8000

# ============================================================================
# OpenAI Configuration (REQUIRED!)
# ============================================================================
# Get your key: https://platform.openai.com/api-keys
OPENAI_API_KEY=your_openai_key_here
OPENAI_ORG_ID=

# Model Selection
MODEL_PARSER=gpt-4o-mini
MODEL_REASONING=gpt-4o-mini
MODEL_ANALYTICS=gpt-4o
MODEL_VOICE=whisper-1
MODEL_EMBEDDINGS=text-embedding-3-small

MAX_CONTEXT_TOKENS=100000

# ============================================================================
# Telegram Bot (REQUIRED!)
# ============================================================================
# Get token from @BotFather: https://t.me/BotFather
TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here
TELEGRAM_SECRET_TOKEN=random_secret_string_123456
TELEGRAM_WEBHOOK_URL=
TELEGRAM_USE_WEBHOOK=false

# ============================================================================
# Database - PostgreSQL (REQUIRED!)
# ============================================================================
DATABASE_URL=postgresql+asyncpg://planner:planner123@localhost:5432/planner

DB_POOL_SIZE=5
DB_MAX_OVERFLOW=10
DB_ECHO=false

# ============================================================================
# Redis - Cache
# ============================================================================
REDIS_URL=redis://localhost:6379/0
REDIS_PASSWORD=

# ============================================================================
# RAG Configuration
# ============================================================================
EMBEDDING_DIMENSION=1536
SIMILARITY_THRESHOLD=0.7
RAG_TOP_K=5

# ============================================================================
# Business Rules
# ============================================================================
DEFAULT_DEADLINE_DAYS=7
WORKDAY_START_HOUR=9
WORKDAY_END_HOUR=18
TIMEZONE=Asia/Almaty

TIME_MORNING=09:00
TIME_AFTERNOON=13:00
TIME_EVENING=18:00

# ============================================================================
# Rate Limiting
# ============================================================================
RATE_LIMIT_PER_MINUTE=30
RATE_LIMIT_PER_HOUR=500

# ============================================================================
# Monitoring
# ============================================================================
SENTRY_DSN=
ENABLE_METRICS=true
"""
    
    env_path = Path(".env")
    
    # Check if .env already exists
    if env_path.exists():
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Overwrite? (y/N): ").strip().lower()
        if response != 'y':
            print("‚ùå Cancelled.")
            return False
    
    # Write .env file
    env_path.write_text(env_template, encoding='utf-8')
    print("‚úÖ Created .env file")
    
    return True


def prompt_for_keys():
    """Interactively prompt for API keys."""
    
    print("\n" + "="*60)
    print("üìã API Keys Setup")
    print("="*60)
    
    print("\n1Ô∏è‚É£  Telegram Bot Token")
    print("   Get from: https://t.me/BotFather")
    telegram_token = input("   Enter token (or press Enter to skip): ").strip()
    
    print("\n2Ô∏è‚É£  OpenAI API Key")
    print("   Get from: https://platform.openai.com/api-keys")
    openai_key = input("   Enter key (or press Enter to skip): ").strip()
    
    print("\n3Ô∏è‚É£  Database URL (optional)")
    print("   Default: postgresql+asyncpg://planner:planner123@localhost:5432/planner")
    db_url = input("   Enter URL (or press Enter for default): ").strip()
    
    return {
        'telegram_token': telegram_token,
        'openai_key': openai_key,
        'db_url': db_url or 'postgresql+asyncpg://planner:planner123@localhost:5432/planner'
    }


def update_env_file(keys):
    """Update .env file with provided keys."""
    
    env_path = Path(".env")
    
    if not env_path.exists():
        print("‚ùå .env file not found. Run without arguments to create it first.")
        return False
    
    content = env_path.read_text(encoding='utf-8')
    
    # Update keys
    if keys['telegram_token']:
        content = content.replace(
            'TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here',
            f'TELEGRAM_BOT_TOKEN={keys["telegram_token"]}'
        )
        print("‚úÖ Updated TELEGRAM_BOT_TOKEN")
    
    if keys['openai_key']:
        content = content.replace(
            'OPENAI_API_KEY=your_openai_key_here',
            f'OPENAI_API_KEY={keys["openai_key"]}'
        )
        print("‚úÖ Updated OPENAI_API_KEY")
    
    if keys['db_url']:
        content = content.replace(
            'DATABASE_URL=postgresql+asyncpg://planner:planner123@localhost:5432/planner',
            f'DATABASE_URL={keys["db_url"]}'
        )
        print("‚úÖ Updated DATABASE_URL")
    
    # Write back
    env_path.write_text(content, encoding='utf-8')
    
    return True


def verify_setup():
    """Verify that .env is configured correctly."""
    
    env_path = Path(".env")
    
    if not env_path.exists():
        print("‚ùå .env file not found")
        return False
    
    content = env_path.read_text(encoding='utf-8')
    
    print("\n" + "="*60)
    print("üîç Verifying setup...")
    print("="*60)
    
    checks = {
        'Telegram Token': 'TELEGRAM_BOT_TOKEN=your_telegram_bot_token_here' not in content,
        'OpenAI Key': 'OPENAI_API_KEY=your_openai_key_here' not in content,
        'Database URL': 'DATABASE_URL=' in content
    }
    
    all_ok = True
    for name, ok in checks.items():
        status = "‚úÖ" if ok else "‚ùå"
        print(f"{status} {name}: {'Configured' if ok else 'NOT configured'}")
        if not ok:
            all_ok = False
    
    print()
    
    if all_ok:
        print("üéâ Setup complete! You can now run:")
        print("   make run-debug")
    else:
        print("‚ö†Ô∏è  Please edit .env and fill in missing values")
        print("   See SETUP_API_KEYS.md for instructions")
    
    return all_ok


def main():
    """Main setup flow."""
    
    print("üöÄ Business Planner - Environment Setup")
    print()
    
    # Check if .env exists
    if not Path(".env").exists():
        print("Creating new .env file...")
        if not create_env_file():
            return 1
        print()
    
    # Ask if user wants to enter keys interactively
    print("Would you like to enter API keys now?")
    response = input("(Y/n): ").strip().lower()
    
    if response in ['', 'y', 'yes']:
        keys = prompt_for_keys()
        update_env_file(keys)
    else:
        print("\nüí° You can manually edit .env file")
        print("   See SETUP_API_KEYS.md for instructions")
    
    print()
    verify_setup()
    
    return 0


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚ùå Cancelled by user")
        sys.exit(1)

