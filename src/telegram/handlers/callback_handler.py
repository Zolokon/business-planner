"""
Callback Query Handler - Business Planner.

Handles inline button callbacks.

Callback data format:
- complete:<task_id> - Complete task
- edit:<task_id> - Edit task
- reschedule:<task_id> - Reschedule task
- delete:<task_id> - Delete task
- today - Show today's tasks
- week - Show week's tasks
- help - Show help

Reference: ADR-007 (Telegram Architecture)
"""

from telegram import Update
from telegram.ext import ContextTypes

from src.utils.logger import logger
from src.infrastructure.database import get_session
from src.infrastructure.database.repositories.task_repository import TaskRepository


# ============================================================================
# Callback Query Handler
# ============================================================================

async def handle_callback_query(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Handle inline button callback queries.
    
    Args:
        update: Telegram update with callback query
        context: Bot context
    """
    
    query = update.callback_query
    user = update.effective_user
    
    if not query or not query.data:
        return
    
    # Answer callback query (removes "loading" indicator)
    await query.answer()
    
    callback_data = query.data
    
    logger.info(
        "callback_received",
        user_id=user.id,
        callback_data=callback_data
    )
    
    # Parse callback data
    if ":" in callback_data:
        action, param = callback_data.split(":", 1)
    else:
        action = callback_data
        param = None
    
    # Route to appropriate handler
    try:
        if action == "complete":
            await handle_complete_callback(query, context, int(param))
        elif action == "edit":
            await handle_edit_callback(query, context, int(param))
        elif action == "edit_title":
            await handle_edit_title_callback(query, context, int(param))
        elif action == "edit_priority":
            await handle_edit_priority_callback(query, context, int(param))
        elif action == "edit_deadline":
            await handle_edit_deadline_callback(query, context, int(param))
        elif action == "edit_cancel":
            await handle_edit_cancel_callback(query, context, int(param))
        elif action == "set_priority":
            await handle_set_priority_callback(query, context, param)
        elif action == "set_deadline":
            await handle_set_deadline_callback(query, context, param)
        elif action == "reschedule":
            await handle_reschedule_callback(query, context, int(param))
        elif action == "delete":
            await handle_delete_callback(query, context, int(param))
        elif action == "today":
            await handle_today_callback(query, context)
        elif action == "week":
            await handle_week_callback(query, context)
        elif action == "help":
            await handle_help_callback(query, context)
        elif action == "complete_prompt":
            await handle_complete_prompt_callback(query, context)
        elif action == "new_task":
            await handle_new_task_callback(query, context)
        elif action == "evening_reschedule":
            await handle_evening_reschedule_callback(query, context, int(param))
        elif action == "evening_complete":
            await handle_evening_complete_callback(query, context, int(param))
        else:
            logger.warning("unknown_callback_action", action=action)
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            
    except Exception as e:
        logger.error(
            "callback_handler_error",
            user_id=user.id,
            callback_data=callback_data,
            error=str(e)
        )
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# ============================================================================
# Individual Callback Handlers
# ============================================================================

async def handle_complete_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    task_id: int
) -> None:
    """Handle 'complete task' button click.
    
    Args:
        query: Callback query
        context: Bot context
        task_id: Task ID to complete
    """
    
    user = query.from_user
    
    logger.info("callback_complete_task", user_id=user.id, task_id=task_id)

    try:
        session_gen = get_session()
        session = await anext(session_gen)
        try:
            repo = TaskRepository(session)

            # Get task
            task = await repo.get_by_id(task_id)

            if not task:
                await query.edit_message_text(f"[–û–®–ò–ë–ö–ê] –ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # TODO: Prompt for actual duration
            # For now, use estimated as actual
            actual_duration = task.estimated_duration or 60

            # Complete task
            completed_task = await repo.complete(task_id, actual_duration)
        finally:
            await session.close()

        # Update message
        await query.edit_message_text(
            f"–ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê\n\n"
            f"{completed_task.title}\n\n"
            f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
        )
        
        logger.info("task_completed_via_button", user_id=user.id, task_id=task_id)
        
    except Exception as e:
        logger.error("callback_complete_failed", task_id=task_id, error=str(e))
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"
        )


async def handle_edit_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    task_id: int
) -> None:
    """Handle 'edit task' button click.

    Args:
        query: Callback query
        context: Bot context
        task_id: Task ID to edit
    """

    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    logger.info("callback_edit_task", task_id=task_id)

    # Get task details
    try:
        session_gen = get_session()
        session = await anext(session_gen)
        try:
            repo = TaskRepository(session)
            task = await repo.get_by_id(task_id)

            if not task:
                await query.edit_message_text(f"[–û–®–ò–ë–ö–ê] –ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
        finally:
            await session.close()

        # Show edit menu - clean formatting
        business_names = {1: "Inventum", 2: "Inventum Lab", 3: "R&D", 4: "Trade"}
        priority_names = {1: "–í–´–°–û–ö–ò–ô", 2: "–°–†–ï–î–ù–ò–ô", 3: "–ù–ò–ó–ö–ò–ô", 4: "–û–¢–õ–û–ñ–ï–ù–ù–´–ô"}

        business_name = business_names.get(task.business_id, f"Business {task.business_id}")
        priority_name = priority_names.get(task.priority, "–ù–µ —É–∫–∞–∑–∞–Ω")
        deadline_text = task.deadline.strftime("%d.%m.%Y") if task.deadline else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        message = f"""–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–î–ê–ß–ò #{task_id}

{task.title}

–ë–∏–∑–Ω–µ—Å:    {business_name}
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_name}
–î–µ–¥–ª–∞–π–Ω:   {deadline_text}

–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"""

        keyboard = [
            [
                InlineKeyboardButton("–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title:{task_id}"),
                InlineKeyboardButton("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", callback_data=f"edit_priority:{task_id}")
            ],
            [
                InlineKeyboardButton("–î–µ–¥–ª–∞–π–Ω", callback_data=f"edit_deadline:{task_id}"),
                InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"edit_cancel:{task_id}")
            ]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup)

    except Exception as e:
        logger.error("callback_edit_failed", task_id=task_id, error=str(e))
        await query.edit_message_text("[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á–∏")


async def handle_edit_title_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    task_id: int
) -> None:
    """Handle edit title button - prompt for new title.

    Args:
        query: Callback query
        context: Bot context
        task_id: Task ID
    """

    # Store task_id in user context for next message
    context.user_data["editing_task_id"] = task_id
    context.user_data["editing_field"] = "title"

    await query.edit_message_text(
        f"‚úèÔ∏è **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ #{task_id}**\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )


async def handle_edit_priority_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    task_id: int
) -> None:
    """Handle edit priority button - show priority options.

    Args:
        query: Callback query
        context: Bot context
        task_id: Task ID
    """

    from telegram import InlineKeyboardButton, InlineKeyboardMarkup

    keyboard = [
        [InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data=f"set_priority:1:{task_id}")],
        [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data=f"set_priority:2:{task_id}")],
        [InlineKeyboardButton("üü¢ –ù–∏–∑–∫–∏–π", callback_data=f"set_priority:3:{task_id}")],
        [InlineKeyboardButton("‚ö™ –ù–µ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏", callback_data=f"set_priority:4:{task_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit:{task_id}")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ #{task_id}:**",
        reply_markup=reply_markup
    )


async def handle_edit_deadline_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    task_id: int
) -> None:
    """Handle edit deadline button - show deadline options.

    Args:
        query: Callback query
        context: Bot context
        task_id: Task ID
    """

    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    from datetime import datetime, timedelta

    today = datetime.now().date()
    tomorrow = today + timedelta(days=1)
    in_3_days = today + timedelta(days=3)
    in_week = today + timedelta(days=7)

    keyboard = [
        [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data=f"set_deadline:{today.isoformat()}:{task_id}")],
        [InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data=f"set_deadline:{tomorrow.isoformat()}:{task_id}")],
        [InlineKeyboardButton("üìÖ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è", callback_data=f"set_deadline:{in_3_days.isoformat()}:{task_id}")],
        [InlineKeyboardButton("üìÖ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", callback_data=f"set_deadline:{in_week.isoformat()}:{task_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit:{task_id}")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ #{task_id}:**",
        reply_markup=reply_markup
    )


async def handle_edit_cancel_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    task_id: int
) -> None:
    """Handle edit cancel button.

    Args:
        query: Callback query
        context: Bot context
        task_id: Task ID
    """

    # Clear editing context
    context.user_data.pop("editing_task_id", None)
    context.user_data.pop("editing_field", None)

    await query.edit_message_text("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


async def handle_set_priority_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    param: str
) -> None:
    """Handle set priority button - update task priority.

    Args:
        query: Callback query
        context: Bot context
        param: "priority:task_id" string
    """

    from src.domain.models import TaskUpdate

    # Parse param: "priority:task_id"
    parts = param.split(":")
    if len(parts) != 2:
        await query.edit_message_text("[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    priority = int(parts[0])
    task_id = int(parts[1])

    try:
        session_gen = get_session()
        session = await anext(session_gen)
        try:
            repo = TaskRepository(session)

            # Update priority
            task_update = TaskUpdate(priority=priority)
            updated_task = await repo.update(task_id, task_update)
        finally:
            await session.close()

        priority_names = {1: "–í–´–°–û–ö–ò–ô", 2: "–°–†–ï–î–ù–ò–ô", 3: "–ù–ò–ó–ö–ò–ô", 4: "–û–¢–õ–û–ñ–ï–ù–ù–´–ô"}
        priority_name = priority_names.get(priority, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        await query.edit_message_text(
            f"–ü–†–ò–û–†–ò–¢–ï–¢ –û–ë–ù–û–í–õ–ï–ù\n\n"
            f"–ó–∞–¥–∞—á–∞: {updated_task.title}\n"
            f"–ù–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_name}"
        )

        logger.info("task_priority_updated", task_id=task_id, priority=priority)

    except Exception as e:
        logger.error("callback_set_priority_failed", task_id=task_id, error=str(e))
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞")


async def handle_set_deadline_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    param: str
) -> None:
    """Handle set deadline button - update task deadline.

    Args:
        query: Callback query
        context: Bot context
        param: "date:task_id" string
    """

    from src.domain.models import TaskUpdate
    from datetime import datetime

    # Parse param: "date:task_id"
    parts = param.split(":")
    if len(parts) != 2:
        await query.edit_message_text("[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    date_str = parts[0]
    task_id = int(parts[1])

    try:
        # Parse date (will be midnight 00:00 by default if no time specified)
        deadline_date = datetime.fromisoformat(date_str)
        # Keep as-is: 00:00 for date-only deadlines
        deadline = deadline_date

        session_gen = get_session()
        session = await anext(session_gen)
        try:
            repo = TaskRepository(session)

            # Update deadline
            task_update = TaskUpdate(deadline=deadline)
            updated_task = await repo.update(task_id, task_update)
        finally:
            await session.close()

        deadline_text = deadline.strftime("%d.%m.%Y")

        await query.edit_message_text(
            f"–î–ï–î–õ–ê–ô–ù –û–ë–ù–û–í–õ–ï–ù\n\n"
            f"–ó–∞–¥–∞—á–∞: {updated_task.title}\n"
            f"–ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω: {deadline_text}"
        )

        logger.info("task_deadline_updated", task_id=task_id, deadline=deadline_text)

    except Exception as e:
        logger.error("callback_set_deadline_failed", task_id=task_id, error=str(e))
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞")


async def handle_reschedule_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    task_id: int
) -> None:
    """Handle 'reschedule task' button click - redirect to edit deadline.

    Args:
        query: Callback query
        context: Bot context
        task_id: Task ID to reschedule
    """

    logger.info("callback_reschedule_task", task_id=task_id)

    # Redirect to deadline editing
    await handle_edit_deadline_callback(query, context, task_id)


async def handle_delete_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    task_id: int
) -> None:
    """Handle 'delete task' button click.
    
    Args:
        query: Callback query
        context: Bot context
        task_id: Task ID to delete
    """
    
    user = query.from_user
    
    logger.info("callback_delete_task", user_id=user.id, task_id=task_id)

    try:
        session_gen = get_session()
        session = await anext(session_gen)
        try:
            repo = TaskRepository(session)

            # Soft delete (archive)
            await repo.delete(task_id)
        finally:
            await session.close()

        await query.edit_message_text(
            f"–ó–ê–î–ê–ß–ê #{task_id} –£–î–ê–õ–ï–ù–ê"
        )
        
        logger.info("task_deleted_via_button", user_id=user.id, task_id=task_id)
        
    except Exception as e:
        logger.error("callback_delete_failed", task_id=task_id, error=str(e))
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"
        )


async def handle_today_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Handle 'today' button click - show today's tasks.
    
    Args:
        query: Callback query
        context: Bot context
    """
    
    # Redirect to today command
    from src.telegram.handlers.command_handler import today_command
    
    # Simulate command update
    # This is a bit hacky but works
    await query.message.reply_text("üìã –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")


async def handle_week_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Handle 'week' button click - show week's tasks.
    
    Args:
        query: Callback query
        context: Bot context
    """
    
    await query.message.reply_text("üìÖ –ó–∞–≥—Ä—É–∂–∞—é –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é...")


async def handle_help_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Handle 'help' button click - show help.
    
    Args:
        query: Callback query
        context: Bot context
    """
    
    help_text = """‚ùì **–ü–æ–º–æ—â—å**

üé§ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π
üìã /today - –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
üìÖ /week - –ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é
üìù /task - –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º
‚úÖ /complete - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
üìä /weekly - –ù–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
"""
    
    await query.edit_message_text(help_text)


async def handle_complete_prompt_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Handle 'complete task prompt' button - ask which task to complete.
    
    Args:
        query: Callback query
        context: Bot context
    """
    
    await query.edit_message_text(
        "‚úÖ **–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É**\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /complete <–Ω–æ–º–µ—Ä>\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª –ø–æ–¥ –Ω—É–∂–Ω–æ–π –∑–∞–¥–∞—á–µ–π."
    )


async def handle_new_task_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Handle 'new task' button - prompt to create task.
    
    Args:
        query: Callback query
        context: Bot context
    """
    
    await query.edit_message_text(
        "‚ûï **–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞**\n\n"
        "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "–∏–ª–∏\n"
        "üìù /task <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>"
    )


async def handle_evening_reschedule_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    task_id: int
) -> None:
    """Handle 'reschedule to tomorrow' button from evening summary.

    Args:
        query: Callback query
        context: Bot context
        task_id: Task ID to reschedule
    """
    from src.domain.models import TaskUpdate
    from datetime import datetime, timedelta

    user = query.from_user

    logger.info("evening_reschedule_task", user_id=user.id, task_id=task_id)

    try:
        session_gen = get_session()
        session = await anext(session_gen)
        try:
            repo = TaskRepository(session)

            # Get current task
            task = await repo.get_by_id(task_id)
            if not task:
                await query.edit_message_text(f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # Calculate tomorrow's date
            tomorrow = datetime.now().date() + timedelta(days=1)

            # Keep time if exists, otherwise set to 00:00
            if task.deadline and (task.deadline.hour != 0 or task.deadline.minute != 0):
                # Has specific time, keep it
                new_deadline = datetime.combine(tomorrow, task.deadline.time())
            else:
                # No specific time, set to midnight (00:00)
                new_deadline = datetime.combine(tomorrow, datetime.min.time())

            # Update deadline
            task_update = TaskUpdate(deadline=new_deadline)
            updated_task = await repo.update(task_id, task_update)

        finally:
            await session.close()

        # Format response
        deadline_str = new_deadline.strftime("%d.%m.%Y")
        if new_deadline.hour != 0 or new_deadline.minute != 0:
            deadline_str += f" –≤ {new_deadline.strftime('%H:%M')}"

        await query.edit_message_text(
            f"‚úÖ –ó–ê–î–ê–ß–ê –ü–ï–†–ï–ù–ï–°–ï–ù–ê –ù–ê –ó–ê–í–¢–†–ê\n\n"
            f"{updated_task.title}\n\n"
            f"–ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω: {deadline_str}"
        )

        logger.info("evening_task_rescheduled", task_id=task_id, new_deadline=deadline_str)

    except Exception as e:
        logger.error("evening_reschedule_failed", task_id=task_id, error=str(e))
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–¥–∞—á–∏")


async def handle_evening_complete_callback(
    query,
    context: ContextTypes.DEFAULT_TYPE,
    task_id: int
) -> None:
    """Handle 'complete task' button from evening summary.

    Args:
        query: Callback query
        context: Bot context
        task_id: Task ID to complete
    """
    user = query.from_user

    logger.info("evening_complete_task", user_id=user.id, task_id=task_id)

    try:
        session_gen = get_session()
        session = await anext(session_gen)
        try:
            repo = TaskRepository(session)

            # Get task
            task = await repo.get_by_id(task_id)
            if not task:
                await query.edit_message_text(f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # Use estimated duration as actual (user can adjust later if needed)
            actual_duration = task.estimated_duration or 60

            # Complete task
            completed_task = await repo.complete(task_id, actual_duration)

        finally:
            await session.close()

        await query.edit_message_text(
            f"‚úÖ –ó–ê–î–ê–ß–ê –ó–ê–í–ï–†–®–ï–ù–ê\n\n"
            f"{completed_task.title}\n\n"
            f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
        )

        logger.info("evening_task_completed", user_id=user.id, task_id=task_id)

    except Exception as e:
        logger.error("evening_complete_failed", task_id=task_id, error=str(e))
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")

