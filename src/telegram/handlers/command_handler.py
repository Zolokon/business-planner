"""
Command Handlers - Business Planner.

Implements Telegram bot commands:
/start, /today, /week, /task, /complete, /weekly, /help

Reference: docs/03-api/telegram-commands.md
"""

from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from sqlalchemy import select

from src.utils.logger import logger
from src.infrastructure.database import get_session
from src.infrastructure.database.models import UserORM
from src.infrastructure.database.repositories.task_repository import TaskRepository
from src.domain.models.enums import TaskStatus


# ============================================================================
# /start - Welcome & Onboarding
# ============================================================================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /start command - welcome message.
    
    Shows:
    - Welcome message
    - How to use the bot
    - Quick start guide
    
    Reference: docs/03-api/telegram-commands.md (/start)
    """
    
    user = update.effective_user
    
    logger.info("command_start", user_id=user.id, username=user.username)
    
    welcome_message = f"""üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø **Business Planner** - —Ç–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.

üé§ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
‚Ä¢ –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å, –æ–ø—Ä–µ–¥–µ–ª—é –±–∏–∑–Ω–µ—Å, –¥–µ–¥–ª–∞–π–Ω –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
‚Ä¢ –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

üìã **–ö–æ–º–∞–Ω–¥—ã:**
/today - –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/week - –ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é
/task - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º
/complete - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
/weekly - –ù–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–ø—è—Ç–Ω–∏—Ü–∞)
/help - –ü–æ–º–æ—â—å

üöÄ **–ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:**
–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π!

–ù–∞–ø—Ä–∏–º–µ—Ä: "–ù—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å —Ñ—Ä–µ–∑–µ—Ä –¥–ª—è –ò–≤–∞–Ω–æ–≤–∞ –¥–æ –∑–∞–≤—Ç—Ä–∞"
"""
    
    # Quick action buttons
    keyboard = [
        [
            InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="today"),
            InlineKeyboardButton("üìÖ –ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="week")
        ],
        [
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)


# ============================================================================
# /today - Today's Tasks
# ============================================================================

async def today_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /today command - show tasks for today.
    
    Groups tasks by:
    - Priority (1 = DO NOW, 2 = Important, 3 = Normal, 4 = Backlog)
    - Business
    
    Reference: docs/03-api/telegram-commands.md (/today)
    """
    
    user = update.effective_user
    
    logger.info("command_today", user_id=user.id)

    await update.message.reply_chat_action("typing")

    try:
        # Get database session
        session_gen = get_session()
        session = await anext(session_gen)
        try:
            # Map Telegram user to DB user
            stmt = select(UserORM).where(UserORM.telegram_id == user.id)
            result_db = await session.execute(stmt)
            db_user = result_db.scalar_one_or_none()

            if not db_user:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return

            db_user_id = db_user.id

            repo = TaskRepository(session)

            # Get today's tasks (deadline = today)
            today = datetime.now().date()
            tasks = await repo.find_by_deadline(
                user_id=db_user_id,
                date=today
            )
        finally:
            await session.close()

        if not tasks:
            await update.message.reply_text(
                "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É."
            )
            return

        # Group by priority
        priority_names = {1: "–í–´–°–û–ö–ò–ô", 2: "–°–†–ï–î–ù–ò–ô", 3: "–ù–ò–ó–ö–ò–ô", 4: "–û–¢–õ–û–ñ–ï–ù–ù–´–ô"}
        business_names = {1: "Inventum", 2: "Inventum Lab", 3: "R&D", 4: "Trade"}

        tasks_by_priority = {}
        for task in tasks:
            if task.priority not in tasks_by_priority:
                tasks_by_priority[task.priority] = []
            tasks_by_priority[task.priority].append(task)

        # Format message - clean, structured
        message = f"–ó–ê–î–ê–ß–ò –ù–ê –°–ï–ì–û–î–ù–Ø ({len(tasks)})\n"
        message += "=" * 40 + "\n\n"

        for priority in sorted(tasks_by_priority.keys()):
            priority_tasks = tasks_by_priority[priority]
            message += f"[{priority_names[priority]}] ({len(priority_tasks)})\n"
            message += "-" * 40 + "\n"

            for task in priority_tasks[:5]:  # Max 5 per priority
                business_name = business_names.get(task.business_id, f"Business {task.business_id}")

                message += f"\n{task.title}\n"
                message += f"  –ë–∏–∑–Ω–µ—Å: {business_name}"

                if task.estimated_duration:
                    hours = task.estimated_duration // 60
                    mins = task.estimated_duration % 60
                    time_str = f"{hours}—á {mins}–º" if hours > 0 else f"{mins}–º"
                    message += f" | –í—Ä–µ–º—è: ~{time_str}"

                if task.assigned_to:
                    message += f" | ID: {task.assigned_to}"

                message += "\n"

            message += "\n"
        
        # Add action buttons
        keyboard = [
            [
                InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="complete_prompt"),
                InlineKeyboardButton("–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")
            ],
            [
                InlineKeyboardButton("–ù–∞ –Ω–µ–¥–µ–ª—é", callback_data="week")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error("command_today_failed", user_id=user.id, error=str(e))
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# ============================================================================
# /week - Week's Tasks
# ============================================================================

async def week_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /week command - show tasks for the week.
    
    Reference: docs/03-api/telegram-commands.md (/week)
    """
    
    user = update.effective_user
    
    logger.info("command_week", user_id=user.id)

    await update.message.reply_chat_action("typing")

    try:
        # Get database session
        session_gen = get_session()
        session = await anext(session_gen)
        try:
            # Map Telegram user to DB user
            stmt = select(UserORM).where(UserORM.telegram_id == user.id)
            result_db = await session.execute(stmt)
            db_user = result_db.scalar_one_or_none()

            if not db_user:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return

            db_user_id = db_user.id

            repo = TaskRepository(session)

            # Get this week's tasks
            today = datetime.now().date()
            week_end = today + timedelta(days=7)

            tasks = await repo.find_by_date_range(
                user_id=db_user_id,
                start_date=today,
                end_date=week_end
            )
        finally:
            await session.close()

        if not tasks:
            await update.message.reply_text(
                "‚úÖ –ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç!\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É."
            )
            return
        
        # Group by day
        tasks_by_day = {}
        for task in tasks:
            if task.deadline:
                day_key = task.deadline.date()
                if day_key not in tasks_by_day:
                    tasks_by_day[day_key] = []
                tasks_by_day[day_key].append(task)
        
        # Format message
        weekday_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        business_emoji = {1: "üîß", 2: "ü¶∑", 3: "üî¨", 4: "üíº"}
        
        message = f"üìÖ **–ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é** ({len(tasks)} —à—Ç.)\n\n"
        
        for day in sorted(tasks_by_day.keys()):
            day_tasks = tasks_by_day[day]
            weekday = weekday_names[day.weekday()]
            
            # Highlight today
            if day == today:
                message += f"**üîπ {weekday}, {day.strftime('%d.%m')} (–°–ï–ì–û–î–ù–Ø)**\n"
            else:
                message += f"**{weekday}, {day.strftime('%d.%m')}**\n"
            
            for task in day_tasks[:3]:  # Max 3 per day
                biz_emoji = business_emoji.get(task.business_id, "üìã")
                message += f"  {biz_emoji} {task.title[:40]}{'...' if len(task.title) > 40 else ''}\n"
            
            if len(day_tasks) > 3:
                message += f"  ... –∏ –µ—â–µ {len(day_tasks) - 3}\n"
            
            message += "\n"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        logger.error("command_week_failed", user_id=user.id, error=str(e))
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# ============================================================================
# /task - Create Task (Text)
# ============================================================================

async def task_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /task command - create task from text.
    
    Usage: /task <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏>
    
    Reference: docs/03-api/telegram-commands.md (/task)
    """
    
    user = update.effective_user
    
    logger.info("command_task", user_id=user.id)
    
    # Get task text from command arguments
    if not context.args:
        await update.message.reply_text(
            "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–æ–º**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /task <–æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/task –ü–æ—á–∏–Ω–∏—Ç—å —Ñ—Ä–µ–∑–µ—Ä –¥–ª—è –ò–≤–∞–Ω–æ–≤–∞ –¥–æ –∑–∞–≤—Ç—Ä–∞\n\n"
            "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ø—Ä–æ—â–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
        )
        return
    
    task_text = " ".join(context.args)
    
    await update.message.reply_chat_action("typing")
    
    try:
        # Use task parser (same as voice)
        from src.ai.parsers.task_parser import parse_task_from_transcript
        from src.infrastructure.database.repositories.task_repository import TaskRepository
        
        # Get database session and map user
        session_gen = get_session()
        session = await anext(session_gen)
        try:
            # Map Telegram user to DB user
            stmt = select(UserORM).where(UserORM.telegram_id == user.id)
            result_db = await session.execute(stmt)
            db_user = result_db.scalar_one_or_none()

            if not db_user:
                await update.message.reply_text(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return

            db_user_id = db_user.id

            # Parse text
            parsed = await parse_task_from_transcript(
                transcript=task_text,
                user_id=db_user_id
            )

            # Create task
            repo = TaskRepository(session)
            task = await repo.create(parsed, user_id=db_user_id)
        finally:
            await session.close()
        
        # Format response
        business_emoji = {1: "üîß", 2: "ü¶∑", 3: "üî¨", 4: "üíº"}
        business_names = {1: "Inventum", 2: "Inventum Lab", 3: "R&D", 4: "Trade"}

        business_name = business_names.get(task.business_id, f"Business {task.business_id}")

        response = f"""‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!

{task.title}

{business_emoji.get(task.business_id, 'üìã')} –ë–∏–∑–Ω–µ—Å: {business_name}
"""
        
        if task.deadline:
            response += f"üìÖ –î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y %H:%M')}\n"
        
        if task.estimated_duration:
            hours = task.estimated_duration // 60
            mins = task.estimated_duration % 60
            time_str = f"{hours}—á {mins}–º" if hours > 0 else f"{mins}–º"
            response += f"‚è±Ô∏è ~{time_str}\n"
        
        # Add action buttons
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete:{task.id}"),
                InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit:{task.id}")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(response, reply_markup=reply_markup)
        
        logger.info("task_created_via_text", user_id=user.id, task_id=task.id)
        
    except Exception as e:
        logger.error("command_task_failed", user_id=user.id, error=str(e))
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


# ============================================================================
# /complete - Complete Task
# ============================================================================

async def complete_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /complete command - mark task as completed.
    
    Usage: /complete <task_id>
    
    Reference: docs/03-api/telegram-commands.md (/complete)
    """
    
    user = update.effective_user
    
    logger.info("command_complete", user_id=user.id)
    
    # Check if task_id provided
    if not context.args:
        # Show list of open tasks to complete
        await update.message.reply_text(
            "‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏**\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /complete <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏>\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª –ø–æ–¥ –∑–∞–¥–∞—á–µ–π."
        )
        return
    
    try:
        task_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
        return
    
    await update.message.reply_chat_action("typing")

    try:
        # Get database session
        session_gen = get_session()
        session = await anext(session_gen)
        try:
            repo = TaskRepository(session)

            # Get task
            task = await repo.get_by_id(task_id)

            if not task:
                await update.message.reply_text(f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # TODO: Check if user owns this task

            # Complete task (prompt for actual duration)
            # For now, use estimated duration as actual
            actual_duration = task.estimated_duration or 60

            completed_task = await repo.complete(task_id, actual_duration)
        finally:
            await session.close()
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"**{completed_task.title}**\n\n"
            f"üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
        )
        
        logger.info("task_completed_via_command", user_id=user.id, task_id=task_id)
        
    except Exception as e:
        logger.error("command_complete_failed", user_id=user.id, error=str(e))
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# ============================================================================
# /weekly - Weekly Analytics
# ============================================================================

async def weekly_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /weekly command - generate weekly analytics.
    
    Uses GPT-5 for deep insights (Tier 3).
    
    Reference:
    - docs/03-api/telegram-commands.md (/weekly)
    - docs/05-ai-specifications/prompts/weekly-analytics.md
    """
    
    user = update.effective_user
    
    logger.info("command_weekly", user_id=user.id)
    
    await update.message.reply_text(
        "üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–µ–¥–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É...\n"
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç ~30 —Å–µ–∫—É–Ω–¥."
    )
    
    await update.message.reply_chat_action("typing")
    
    try:
        # TODO: Implement weekly analytics with GPT-5
        # This is a placeholder
        
        analytics = """üìä **–ù–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞** (16-22 –æ–∫—Ç)

‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ**: 23 –∑–∞–¥–∞—á–∏
‚è±Ô∏è **–í—Ä–µ–º—è**: 47 —á–∞—Å–æ–≤
üéØ **–¢–æ—á–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏**: 83% (–æ—Ç–ª–∏—á–Ω–æ!)

**üèÜ –¢–æ–ø –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:**
1. üîß Inventum - 12 –∑–∞–¥–∞—á (—Ñ—Ä–µ–∑–µ—Ä—ã)
2. ü¶∑ Lab - 8 –∑–∞–¥–∞—á (–∫–æ—Ä–æ–Ω–∫–∏)
3. üî¨ R&D - 3 –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞

**‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Å—Ç–∞:**
‚Ä¢ –ó–∞–¥–∞—á–∏ –ø–æ –ö–∏—Ç–∞—é —á–∞—Å—Ç–æ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è
‚Ä¢ –ù–µ–¥–æ–æ—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É

**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:**
‚Ä¢ –ó–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å +20% –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
‚Ä¢ –î–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –°–ª–∞–≤–æ–π –æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Å–æ–∑–≤–æ–Ω–∞—Ö –ø–æ Import&Trade
‚Ä¢ –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –∑–∞–¥–∞—á –ú–∞–∫—Å–∏–º—É –∏ –î–∏–º–µ
"""
        
        await update.message.reply_text(analytics)
        
        logger.info("weekly_analytics_generated", user_id=user.id)
        
    except Exception as e:
        logger.error("command_weekly_failed", user_id=user.id, error=str(e))
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# ============================================================================
# /help - Help
# ============================================================================

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /help command - show help message.
    
    Reference: docs/03-api/telegram-commands.md (/help)
    """
    
    user = update.effective_user
    
    logger.info("command_help", user_id=user.id)
    
    help_text = """‚ùì **–ü–æ–º–æ—â—å - Business Planner**

üé§ **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏:
‚Ä¢ "–ù—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å —Ñ—Ä–µ–∑–µ—Ä –¥–ª—è –ò–≤–∞–Ω–æ–≤–∞ –¥–æ –∑–∞–≤—Ç—Ä–∞"
‚Ä¢ "–ú–∞–∫—Å–∏–º—É —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ç–æ—Ç–∏–ø –∫—Ä—ã—à–∫–∏ –∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É"
‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –≤ –ö–∏—Ç–∞–µ —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º"

–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é:
‚úì –ë–∏–∑–Ω–µ—Å (Inventum, Lab, R&D, Trade)
‚úì –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (8 —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã)
‚úì –î–µ–¥–ª–∞–π–Ω (—Å —É—á–µ—Ç–æ–º —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π)
‚úì –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-4)
‚úì –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏)

üìã **–ö–æ–º–∞–Ω–¥—ã:**
/today - –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
/week - –ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é
/task <—Ç–µ–∫—Å—Ç> - –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º
/complete <ID> - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
/weekly - –ù–µ–¥–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–ø—è—Ç–Ω–∏—Ü–∞)
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –æ–±—ã—á–Ω–æ
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –£—Ç–æ—á–Ω—è–π—Ç–µ –¥–µ–¥–ª–∞–π–Ω—ã ("–∑–∞–≤—Ç—Ä–∞", "–∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É")
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

üöÄ **–ü–æ–ø—Ä–æ–±—É–π —Å–µ–π—á–∞—Å:**
–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!
"""
    
    await update.message.reply_text(help_text)

